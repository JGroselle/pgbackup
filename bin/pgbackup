#!/bin/bash
set -euo pipefail

#
# PostgreSQL database backup script
# Copyright (C) 2016 Julien Groselle <julien.groselle@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

# includes common
if [ -x /usr/local/include/bash_common.inc ] ; then
  source /usr/local/include/bash_common.inc
else
  echo "[ERR] Impossible to load bash_common.inc"
  exit 2
fi

# Static Variables
MY_TODAY=$(date +%Y%m%d)
MY_BDD=''
MY_PRUNE=0
MY_BACKUP=0
MY_REMOTE=0
MY_KEYVALUE_OUTPUT='/tmp/pgbackup.out'
CONFIG_FILE='/etc/pgbackup.conf'

# Source configuration file
if [ -r "${CONFIG_FILE}" ] ; then
  source ${CONFIG_FILE}
else
  f_notify -m "Cannot read configuration file: ${CONFIG_FILE}." -s -c 2 -e
fi

# Binaries
declare -A BIN_ || f_notify -m "Impossible to define associative array. Maybe old bash version ?" -sf -c 2 -e
BIN_[RM]=$(which rm)
BIN_[NC]=$(which nc)
BIN_[FIND]=$(which find)
BIN_[GREP]=$(which grep)
BIN_[AWK]=$(which awk)
BIN_[XARGS]=$(which xargs)
BIN_[MKDIR]=$(which mkdir)
BIN_[PSQL]=$(which psql)
BIN_[PGDUMP]=$(which pg_dump)
BIN_[PGDUMPALL]=$(which pg_dumpall)

# Functions
function usage() {
  script_name=$(basename $0)
  echo ""
  echo "  $script_name usage:"
  echo ""
  echo "  $script_name -a                - Backup all database"
  echo "  $script_name -b database_name  - Backup a single database"
  echo "  $script_name -r remote_name    - Backup a remote server"
  echo "  $script_name -h                - Print this help"
  echo ""
  exit 3
}

function backup_test() {
  MY_TEST_POS="$1"
  (( $MY_DEBUG )) && debug Test position : $MY_TEST_POS
  case $MY_TEST_POS in
    "pre")
      # Test BDD
      [ -z "${MY_BDD}" ] && f_notify -m "You MUST specify a database. Use option -a or -b. $(usage)" -sf -c 2
      # Test user
      [ "$LOGNAME" != "root" -a "${MY_REMOTE}" -eq 0 ] && f_notify -m "Script exeucuted with wrong user ($LOGNAME)" -sf -c 2 -e
      # Test binaries
      for binary in ${!BIN_[@]} ; do [[ ${BIN_[$binary]} ]] || f_notify -m "Binary \"$binary\" seems to be absent from the system" -sf -c 2 -e ; done
      # Test Backup folder
      if (( "${MY_REMOTE}" )); then
        [ -d ${MY_PGSQL_DEST_DIR} ] || ${BIN_[MKDIR]} -p ${MY_PGSQL_DEST_DIR}
      else
        [ -d ${MY_PGSQL_DEST_DIR} ] || { ${BIN_[MKDIR]} -p ${MY_PGSQL_DEST_DIR} && chown postgres:postgres ${MY_PGSQL_DEST_DIR}; }
      fi
      # Test remote server
      if (( "${MY_REMOTE}" )); then
        if (( $(${BIN_[NC]} -vz "${PGHOST}" "${PGPORT}" &> /dev/null ) )); then
          f_notify -m "Test remote host failed." -sf -c 2 -e
        fi
        if ! [[ "$(eval stat ${MY_PGPASS})" ]]; then f_notify -m "No .pgpass file found" -sf -c 2 -e ; fi
      fi
      return 0
    ;;
    "database")
      # Test BDD
      [ -z "${MY_BDD}" ] && f_notify -m "You MUST specify a database. $(usage)" -sf -c 2
      return 0
    ;;
    "in_prune")
      # test if target dir already exist
      [ -d "${MY_PGSQL_DEST_DIR}" ] || f_notify -m "No such file or directory (${MY_PGSQL_DEST_DIR})" -sf -c 2 -e
      # test if retention day is an integer
      [[ ${MY_BCKPDAYS} =~ ^-?[0-9]+$ ]] || f_notify -m "Prune parameter must be an integer" -sf -c 2 -e
      return 0
    ;;
    "in_backup")
      # Test if a backup already exist
      [ -e "${MY_TARGET_DUMP}.gz" -o -e "${MY_TARGET_DUMP}" ] && {
        f_notify -m "Today backup already exist, new one is generated" -sf -c 0
        MY_TARGET_DUMP="${MY_PGSQL_DEST_DIR}/$(date +%Y%m%d_%H%M)_${DATABASE}.custom"
       }
      return 0
    ;;
  esac
}

function backup_pgsql_globals() {
  local DUMP="${1}"
  f_notify -m "Start backuping globals objects" -sf -c 0
  if (( "${MY_REMOTE}" )) ; then
    ${BIN_[PGDUMPALL]} -h ${PGHOST} -U ${PGUSER} -w --globals-only -f ${DUMP}
  else
    su - postgres -c "${BIN_[PGDUMPALL]} --globals-only -f ${DUMP}"
  fi
  f_notify -m "Globals objects backuped" -sf -c 0
  return 0
}

function backup_pgsql(){
  local DATABASE="${1}"
  local MY_PGDUMPOPTS='-Fc'
  f_notify -m "Start backuping database ${DATABASE}" -sf -c 0
  if (( "${MY_REMOTE}" )) ; then
    ${BIN_[PGDUMP]} -h ${PGHOST} -U ${PGUSER} -w ${MY_PGDUMPOPTS} -d ${DATABASE} > ${MY_TARGET_DUMP}
  else
    su - postgres -c "${BIN_[PGDUMP]} ${MY_PGDUMPOPTS} ${DATABASE} > ${MY_TARGET_DUMP}"
  fi
  [ "${?}" -ne 0 ] && f_notify -m "Problem while backuping database ${DATABASE}" -sf -c 2 -e
  f_notify -m "Database ${DATABASE} backuped" -sf -c 0
  return 0
}

function prune() {
  # input must be the number of retention days
  local RETENTION_DAYS=${1}

  # check if something is in retention policy
  cd ${MY_PGSQL_DEST_DIR} && local CMD=$(${BIN_[FIND]} . -type f -mtime +${RETENTION_DAYS} | wc -l)
  [ "${CMD}" -eq 0 ] && return 0

  f_notify -m "Start deleting old backups (retention : ${RETENTION_DAYS} days)" -sf -c 0
  cd ${MY_PGSQL_DEST_DIR} && ${BIN_[FIND]} . -type f -mtime +${RETENTION_DAYS} -delete
  [ ${?} != '0' ] && f_notify -m "Problem while deleting old backups..." -sf -c 2 -e
  f_notify -m "Old backups deleted" -sf -c 0
  return 0
}

function backup_compress() {
  f_notify -m "Start compressing backups" -sf -c 0
  cd ${MY_PGSQL_DEST_DIR} && ${BIN_[FIND]} . -name '*.sql' -type f -exec gzip {} +
  [ ${?} != '0' ] && f_notify -m "Problem while compressing backups..." -sf -c 2 -e
  f_notify -m "Backups compressed" -sf -c 0
  return 0
}

# MAIN

# Test arguments existance
[ "${#}" -eq 0 ] && usage

while getopts ":ahdb:r:p:" opt; do
  case ${opt} in
    h)
      usage
    ;;
    a)
      (( ${MY_DEBUG} )) && debug -a was trigered
      [ -z "${MY_BDD}" ] || { f_notify -m 'You cannot use -a and -b options' -s -c 0 && usage ; }
      MY_BDD='all'
      MY_BACKUP=1
    ;;
    d)
      (( ${MY_DEBUG} )) && debug -d was trigered
      MY_DEBUG=1
    ;;
    b)
      (( ${MY_DEBUG} )) && debug -b was trigered
      [ "${MY_BDD}" == 'all' ] && { f_notify -m 'You cannot use -a and -b options' -s -c 0 && usage ; }
      MY_BDD="${OPTARG}"
      MY_BACKUP=1
    ;;
    r)
      (( ${MY_DEBUG} )) && debug -r was trigered
      MY_REMOTE=1
      MY_BACKUP=1
      export PGHOST="${OPTARG}"
    ;;
    p)
      (( ${MY_DEBUG} )) && debug -r was trigered
      MY_PRUNE=1
      MY_BCKPDAYS="${OPTARG}"
    ;;
    :)
      f_notify -m "Option -${OPTARG} requires an argument." -s -c 0 && usage
    ;;
    \?)
      f_notify -m "[ERROR] Invalid option -${OPTARG}" -s -c 0 && usage
    ;;
  esac
done

# Primary tests
backup_test 'pre'

# Define database to backup
if (( ${MY_REMOTE} )); then
  if [ "${MY_BDD}" == 'all' ] ; then
    LIST_BDD="$(psql -h ${PGHOST} -U ${PGUSER} -d ${PGDATABASE} -w -tc "SELECT datname FROM pg_database WHERE datistemplate = false")"
  else
    LIST_BDD="$(psql -h ${PGHOST} -U ${PGUSER} -d ${PGDATABASE} -w -tc "SELECT datname FROM pg_database WHERE datname = '${MY_BDD}' AND datistemplate = false")"
  fi
else
  if [ "${MY_BDD}" == 'all' ] ; then
    LIST_BDD="$(su - postgres -c 'psql -tc "SELECT datname FROM pg_database WHERE datistemplate = false"')"
  else
    LIST_BDD="$(su - postgres -c "psql -tc \"SELECT datname FROM pg_database WHERE datname = '${MY_BDD}' AND datistemplate = false\"")"
  fi
fi

[ -z "${LIST_BDD}" ] && f_notify -m "Database ${MY_BDD} does not exist" -s -c 2 -e

# Run purge
if [ "${MY_BDD}" == 'all' ] ; then
  backup_test 'in_delete'
  rm_old "${MY_BCKPDAYS}"
fi

# Run backups
for DATABASE in ${LIST_BDD} ; do
  MY_TARGET_DUMP="${MY_PGSQL_DEST_DIR}/${MY_TODAY}-${DATABASE}.custom"
  backup_test 'in_backup' "${MY_TARGET_DUMP}"
  backup_pgsql "${DATABASE}"
done

if [ "${MY_BDD}" == 'all' ] ; then
  MY_TARGET_GLOBALS="${MY_PGSQL_DEST_DIR}/${MY_TODAY}-globals.sql"
  backup_pgsql_globals ${MY_TARGET_GLOBALS}
fi

# Compress backups
if [ "${MY_BDD}" == 'all' ] ; then
  backup_compress
fi

# Specific output if not 'all'
if [ "${MY_BDD}" != 'all' ] ; then
  f_notify -m "Dump: ${MY_TARGET_DUMP}" -s -c 0
  echo "dump=${MY_TARGET_DUMP}" > ${MY_KEYVALUE_OUTPUT}
fi
